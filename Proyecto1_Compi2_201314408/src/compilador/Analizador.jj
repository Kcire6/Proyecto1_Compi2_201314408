
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */
options { LOOKAHEAD=1; }
PARSER_BEGIN(Calc1i)
package compilador;
public class Calc1i {
    // The next two declarations are for global variables, usable in
    //any production
    public static int total;  // Total value
    
    public static java.util.Stack argStack = new java.util.Stack(); 
        // evaluation stack

}
PARSER_END(Calc1i)
SKIP :
{ " " |    "\r" |    "\t" }
   // Tokens (terminals) are defined by regular expressions
TOKEN : { < EOL: "\n" > }
TOKEN : /* OPERATORS */
{      < PLUS: "+" >
  |    < MINUS: "-" >
  |    < MULTIPLY: "*" >
  |    < DIVIDE: "/" >
}
 
TOKEN :
{         < CONSTANT: ( <DIGIT> )+ >
|   < #DIGIT: ["0" - "9"] >    // # begins internal definition
                               // (used in rule itself)
}
 
int one_line() :
{}
{    sum() <EOL> { return 1; }
  |  <EOL> { return 0; }
  |  <EOF> { return -1; }
}
 
void sum() ://Production rule: sum ->term ((*|+)term)*)
{Token x;}  // local variable to store token which was matched
{ term()( 
        ( x = <PLUS> | x = <MINUS> ) term()
        {
          int a = ((Integer) argStack.pop()).intValue();
          int b = ((Integer) argStack.pop()).intValue();
          if ( x.kind == PLUS )  // query local variable for type
             argStack.push(new Integer(b + a));
          else
             argStack.push(new Integer(b - a));
        }
        )*
}
 
void term() :
{Token x;}
{ unary() ( 
          ( x = <MULTIPLY> | x = <DIVIDE> ) unary()
           {    int a = ((Integer) argStack.pop()).intValue();
                int b = ((Integer) argStack.pop()).intValue();
                if ( x.kind == MULTIPLY )
                   argStack.push(new Integer(b * a));
                else
                   argStack.push(new Integer(b / a));
           }
          )*
}
 
void unary() :
{}
{ <MINUS> element()
    {   int a = ((Integer) argStack.pop()).intValue();
        argStack.push(new Integer(- a));
    }
    | element()  
         // no need to place value on stack as element() has already
}
 
void element() :
{}
{   <CONSTANT>
    {   try {int x = Integer.parseInt(token.image);
               // token.image contains actual value matched by CONSTANT
            argStack.push(new Integer(x));
        } catch (NumberFormatException ee) {
        argStack.push(new Integer(0));}
    }
    |  "(" sum() ")"
}
